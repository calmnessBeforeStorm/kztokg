6: def calculate_score(word):
    score = 0
    for letter in word:
        score += ord(letter) - ord('a') + 1
    return score

def highest_scoring_word(sentence):
    words = sentence.split()
    max_score = 0
    max_word = ''

    for word in words:
        score = calculate_score(word)
        if score > max_score:
            max_score = score
            max_word = word

    return max_word

2) def build_pyramid(number_of_floors):
    pyramid = []
    for i in range(1, number_of_floors + 1):
        spaces = ' ' * (number_of_floors - i)
        blocks = '* ' * i
        pyramid.append(spaces + blocks.rstrip())
    return pyramid

def print_pyramid(pyramid):
    for floor in pyramid:
        print(floor)

7)def max_possible_number(n):
    sorted_digits = sorted(str(n), reverse=True)

    result = int(''.join(sorted_digits))
    
    return result

9)def accum(s):
    result = ''
    for i, letter in enumerate(s):
        result += letter.upper() + letter.lower() * i
        if i < len(s) - 1:
            result += '-'
    return result

10)def replace_letters_with_positions(string):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    string = string.lower()
    result = ''
    
    for char in string:
        if char in alphabet:
            position = alphabet.index(char) + 1
            result += str(position) + ' '
    
    return result.rstrip()

4)def reverse_long_words(sentence):
    words = sentence.split()

    for i in range(len(words)):
        if len(words[i]) >= 5:
            words[i] = words[i][::-1]

    return ' '.join(words)

1) def sum_of_digits(n):
    # While the number consists of multiple digits
    while n >= 10:
        digits_sum = []
        for digit in str(n):
            digits_sum.append(int(digit))
        n = sum(digits_sum)
    return n

